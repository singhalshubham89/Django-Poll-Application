To start virtual enviroment for Django
Poll\Scripts\activate.bat
cd Poll\mysite

python -m django --version
Creating a project 

django-admin startproject mysite

The outer mysite/ root directory is a container for your project. Its name doesn’t matter to Django; you can rename it to anything you like.
manage.py: A command-line utility that lets you interact with this Django project in various ways. You can read all the details about manage.py in django-admin and manage.py.
The inner mysite/ directory is the actual Python package for your project. Its name is the Python package name you’ll need to use to import anything inside it (e.g. mysite.urls).
mysite/__init__.py: An empty file that tells Python that this directory should be considered a Python package. If you’re a Python beginner, read more about packages in the official Python docs.
mysite/settings.py: Settings/configuration for this Django project. Django settings will tell you all about how settings work.
mysite/urls.py: The URL declarations for this Django project; a “table of contents” of your Django-powered site. You can read more about URLs in URL dispatcher.
mysite/asgi.py: An entry-point for ASGI-compatible web servers to serve your project. See How to deploy with ASGI for more details.
mysite/wsgi.py: An entry-point for WSGI-compatible web servers to serve your project. See How to deploy with WSGI for more details.


Development servers

python manage.py runserver
python manage.py runserver 8080
python manage.py runserver 0:8000

Create new Applications
python manage.py startapp polls

Datbase table creations

 python manage.py migrate

 Create table based on new class
     python manage.py makemigrations polls

The sqlmigrate command takes migration names and returns their SQL:
    python manage.py sqlmigrate polls 0001
this checks for any problems in your project without making migrations or touching the database.
 python manage.py check

start a new Python interactive shell by running 
    python manage.py shell 

Create a superuser
    python manage.py createsuperuser

Running Tests
    python manage.py test polls

Django test client
    python manage.py shell
    from django.test.utils import setup_test_environment
    setup_test_environment():- nstalls a template renderer which will allow us to examine some additional attributes on responses such as response.context that otherwise wouldn’t be available